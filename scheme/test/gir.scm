(import (rnrs (6))
        (ice-9 format)
        (functional)
        (rename (cut) (cut $))
        (oop goops)
        (gir info)
        (gir generics)
        (gir repository)
        (gir functions)
        (gir callables)
        (gir arg)
        (gir type))

(define (get-type-list info)
  (let* ((n     (get-n-args info))
         (args  (map ($ get-arg info <>) (iota n)))
         (types (map get-type args))
         (tt    (map (lambda (t)
                       (if (pointer? t)
                         (list '* (get-tag t))
                         (get-tag t))) types)))
    tt))

(let ((d   (gir-get-default))
      (gtk (gir-require "GIRepository" "2.0")))
  (format #t "loaded namespaces: ~s~%" (gir-get-loaded-namespaces))
  (format #t "version: ~s~%" (gir-get-version "GIRepository"))
  (format #t "#infos: ~a~%" (gir-get-n-infos "GIRepository"))
  (for-each (lambda (idx)
    (let ((info (gir-get-info "GIRepository" idx)))
      (if (eq? (get-type info) 'function)
        (format #t "~a ~s~%" (get-name info) (get-type-list info))
        (format #t "~a type: ~s~%"
          (get-name info)
          (get-type info)))))
    (iota (gir-get-n-infos "GIRepository")))
)


