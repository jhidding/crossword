(library (gir conversions)
  (export GList->list pointer-pointer->list int->bool)
  (import (rnrs (6))
          (system foreign))

  (define (int->bool i)
    (not (zero? i)))

  (define (GList->list p)
    (let loop ((result '())
               (p p))
      (if (null-pointer? p)
        (reverse result)
        (let ((r (lambda (data next prev)
                   (loop (cons data result) next))))
          (apply r (parse-c-struct p (list '* '* '*)))))))

  (define (pointer-pointer->list p)
    (let loop ((result  '())
               (address (pointer-address p)))
      (let ((nts (dereference-pointer (make-pointer address))))
        (if (null-pointer? nts)
          (reverse result)
          (loop (cons nts result)
                (+ address (sizeof '*)))))))
)
